------Fluxo em grafos:


-Fluxo Máximo;
-Corte Mínimo

-O fluxo inicial deve ser igual ao fluxo do final;
-No "cano" o fluxo deve ser menor ou igual a capacidade (propiedade);
-O fluxo sempre é não negativo(propiedade);


------Algoritmos:
*Ford-Furkeson : O(numArestas*Fluxo);
*Edmonds-Karps(extensão do de cima); estratégia de grafo residual (transpor o grafo); BFS O(Arestas² * V);
*Dimix O(E*raiz de V);



------Corte Mínimo:
Dividir o grafo em duas partes onde A possui S e B possui T;
A intersecção B é um conjunto vazio;
C é o corte minímo;
A "separacão" e feita onde há arestas satudaras, ou seja, quando o fluxo é igual a quantidade;

-------------------------------------- CODIGO -----------------------------------------------
int n;
vector<vector<int>> capacity;
vector<vector<int>> adj;

int bfs(int s, int t, vector<int>& parent) {
    fill(parent.begin(), parent.end(), -1);
    parent[s] = -2;
    queue<pair<int, int>> q;
    q.push({s, INF});

    while (!q.empty()) {
        int cur = q.front().first;
        int flow = q.front().second;
        q.pop();

        for (int next : adj[cur]) {
            if (parent[next] == -1 && capacity[cur][next]) {
                parent[next] = cur;
                int new_flow = min(flow, capacity[cur][next]);
                if (next == t)
                    return new_flow;
                q.push({next, new_flow});
            }
        }
    }

    return 0;
}

int maxflow(int s, int t) {
    int flow = 0;
    vector<int> parent(n);
    int new_flow;

    while (new_flow = bfs(s, t, parent)) {
        flow += new_flow;
        int cur = t;
        while (cur != s) {
            int prev = parent[cur];
            capacity[prev][cur] -= new_flow;
            capacity[cur][prev] += new_flow;
            cur = prev;
        }
    }

    return flow;
}
